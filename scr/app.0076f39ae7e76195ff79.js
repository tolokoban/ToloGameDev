(self.webpackChunktolo_game_dev=self.webpackChunktolo_game_dev||[]).push([[143],{6164:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"/*\n * @NOTE: Prepend a `~` to css file paths that are in your node_modules\n *        See https://github.com/webpack-contrib/sass-loader#imports\n */\nbody {\n    position: relative;\n    color: white;\n    height: 100vh;\n    background: linear-gradient(\n        200.96deg,\n        #fedc2a -29.09%,\n        #dd5789 51.77%,\n        #7a2c9e 129.35%\n    );\n    font-family: sans-serif;\n    overflow-y: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\ncanvas {\n    width: 1024px;\n    height: 1024px;\n    box-shadow: 0 4px 8px #0009;\n    background-color: #333;\n    margin: 1em;\n}\n\npre {\n    white-space: pre-wrap;\n    max-width: 90vw;\n}\n\nbutton {\n    background-color: white;\n    padding: 10px 20px;\n    border-radius: 10px;\n    border: none;\n    appearance: none;\n    font-size: 1.3rem;\n    box-shadow: 0px 8px 28px -6px rgba(24, 39, 75, 0.12),\n        0px 18px 88px -4px rgba(24, 39, 75, 0.14);\n    transition: all ease-in 0.1s;\n    cursor: pointer;\n    opacity: 0.9;\n}\n\nbutton:hover {\n    transform: scale(1.05);\n    opacity: 1;\n}\n\nli {\n    list-style: none;\n}\n\na {\n    text-decoration: none;\n    height: fit-content;\n    width: fit-content;\n    margin: 10px;\n}\n\na:hover {\n    opacity: 1;\n    text-decoration: none;\n}\n\n.Hello {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px 0;\n}\n","",{version:3,sources:["webpack://./src/app/app.css"],names:[],mappings:"AAAA;;;EAGE;AACF;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb;;;;;KAKC;IACD,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,2BAA2B;IAC3B,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB;iDAC6C;IAC7C,4BAA4B;IAC5B,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,mBAAmB;IACnB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;AAClB",sourcesContent:["/*\n * @NOTE: Prepend a `~` to css file paths that are in your node_modules\n *        See https://github.com/webpack-contrib/sass-loader#imports\n */\nbody {\n    position: relative;\n    color: white;\n    height: 100vh;\n    background: linear-gradient(\n        200.96deg,\n        #fedc2a -29.09%,\n        #dd5789 51.77%,\n        #7a2c9e 129.35%\n    );\n    font-family: sans-serif;\n    overflow-y: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\ncanvas {\n    width: 1024px;\n    height: 1024px;\n    box-shadow: 0 4px 8px #0009;\n    background-color: #333;\n    margin: 1em;\n}\n\npre {\n    white-space: pre-wrap;\n    max-width: 90vw;\n}\n\nbutton {\n    background-color: white;\n    padding: 10px 20px;\n    border-radius: 10px;\n    border: none;\n    appearance: none;\n    font-size: 1.3rem;\n    box-shadow: 0px 8px 28px -6px rgba(24, 39, 75, 0.12),\n        0px 18px 88px -4px rgba(24, 39, 75, 0.14);\n    transition: all ease-in 0.1s;\n    cursor: pointer;\n    opacity: 0.9;\n}\n\nbutton:hover {\n    transform: scale(1.05);\n    opacity: 1;\n}\n\nli {\n    list-style: none;\n}\n\na {\n    text-decoration: none;\n    height: fit-content;\n    width: fit-content;\n    margin: 10px;\n}\n\na:hover {\n    opacity: 1;\n    text-decoration: none;\n}\n\n.Hello {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px 0;\n}\n"],sourceRoot:""}]);const c=a},6305:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>_});var r=n(3379),o=n.n(r),i=n(7795),a=n.n(i),c=n(569),s=n.n(c),u=n(3565),l=n.n(u),f=n(9216),p=n.n(f),h=n(4589),d=n.n(h),y=n(6164),v={};v.styleTagTransform=d(),v.setAttributes=l(),v.insert=s().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),o()(y.Z,v);const _=y.Z&&y.Z.locals?y.Z.locals:void 0},3397:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e},a=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,c)}s((r=r.apply(t,e||[])).next())}))},c=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=i(n(7294)),l=s(n(9922));function f(t){return a(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u;return c(this,(function(c){switch(c.label){case 0:if(!(e=t.getContext("2d")))throw Error("Unable to creater Canvas 2D context!");return n=t.width,r=t.height,t.style.width="".concat(n,"px"),t.style.height="".concat(r,"px"),e.clearRect(0,0,n,r),o=new l.default({memory:{data:new Uint8ClampedArray(4*n*r),pos:new Float32Array([0,0]),index:new Int32Array([0,1]),rnd:h(65536)}}),i=4*n,-2.18,[4,o.compile(o.flow.module(o.flow.func.void({name:"plot"},o.declare.params({x:"f32",y:"f32"}),o.if.void(o.and.bool(o.is.greater.f32("$x",-2.18),o.is.lesser.f32("$x",2.64),o.is.greater.f32("$y",0),o.is.lesser.f32("$y",10)),[o.set.i32("X","($x ".concat("+").concat(Math.abs(-2.18),") * ").concat(n/4.82)),o.set.i32("Y","($y ".concat("-").concat(Math.abs(0),") * ").concat(r/10)),o.set.i32("offset","(4 * $X) + (".concat(i," * $Y)")),o.set.i32("current","@[$offset + 1]"),o.if.void(o.is.lesser.ui32("$current",255),[o.poke.i32For8("$offset + 3",255),o.poke.i32For8("$offset + 1","".concat(1," + $current"))])])),o.flow.func.void({},o.declare.params({loops:"i32"}),o.set.i32("loop","$loops"),o.set.f32("x","@pos[0]"),o.set.f32("y","@pos[1]"),o.set.i32("idx1","@index[0]"),o.set.i32("idx2","@index[1]"),o.flow.repeat("loop",o.set.i32("idx1","($idx1 + 31) & 0xffff"),o.set.i32("idx2","($idx2 + 71) & 0xffff"),o.set.i32("rnd","@rnd[$idx1] ^ @rnd[$idx2]"),o.if.void(o.is.lesser.ui32("$rnd",220),[o.if.void(o.is.lesser.ui32("$rnd",2),[p(o,0,0,0,0,.16,0,"f1")],[p(o,.85,.04,0,-.04,.85,1.6,"f2")])],[o.if.void(o.is.lesser.ui32("$rnd",238),[p(o,.2,-.26,0,.23,.22,1.6,"f3")],[p(o,-.15,.28,0,.26,.24,.44,"f4")])]),o.call.void("plot",o.get.f32("x"),o.get.f32("y"))),o.poke.f32(0,"$x","pos"),o.poke.f32(1,"$y","pos"),o.poke.i32(0,"$idx1","index"),o.poke.i32(1,"$idx2","index"))))];case 1:return a=c.sent(),console.log(a.sourceCode),s=new ImageData(a.memory.data,n,r),u=function(){a.main(1e6),e&&e.putImageData(s,0,0),window.requestAnimationFrame(u)},window.requestAnimationFrame(u),[2]}}))}))}function p(t,e,n,r,o,i,a,c){return t.bloc.void(t.inc.i32(c),t.set.f32("xx","(".concat(e,"*$x) + (").concat(n,"*$y) + ").concat(r)),t.set.f32("yy","(".concat(o,"*$x) + (").concat(i,"*$y) + ").concat(a)),t.set.f32("x","$xx"),t.set.f32("y","$yy"))}function h(t){for(var e=[],n=0;n<t;n++)e.push((0,255,Math.floor(0+255*Math.random())));return new Uint8ClampedArray(e)}n(6305),e.default=function(){return u.createElement("div",null,u.createElement("canvas",{ref:f,width:1024,height:1024}),u.createElement("br",null),u.createElement("button",null,"Start"))}},373:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=n(3397);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return r(o).default}})},5796:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c=i(n(7294)),s=a(n(373)),u=n(745);!function(){var t=document.getElementById("app");if(!t)throw Error('No element with id "app"!');(0,u.createRoot)(t).render(c.createElement(s.default,null))}()},1135:function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,c)}s((r=r.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=c(n(2177)),u=c(n(8899)),l=c(n(9378)),f=n(8350),p=function(t){function e(e){var n=t.call(this)||this;return n._options=e,n.$memory=new u.default(e.memory),n}return o(e,t),e.prototype.compile=function(t){return i(this,void 0,void 0,(function(){var e,n,r,o,i,c,s,u,p;return a(this,(function(a){switch(a.label){case 0:return e="string"==typeof t?t:(0,f.stringifyCode)(t),[4,(0,l.default)()];case 1:n=a.sent(),a.label=2;case 2:return a.trys.push([2,5,,6]),(r=n.parseWat("<inline>",e)).resolveNames(),r.validate(),o=r.toBinary({log:!0,write_debug_names:!0}),r.destroy(),[4,WebAssembly.compile(o.buffer)];case 3:return i=a.sent(),d=this.$textResources,c=function(t,e){return console.log("[WASM]  ",d[t],e)},s={log:{i32:c,i64:c,f32:c,f64:c,text:h(this.$textResources)}},this.$memory.sizeInBytes>0&&(u=this.$memory.wasmMemory,s.env={mem:u}),[4,WebAssembly.instantiate(i,s)];case 4:return[2,{main:a.sent().exports.main,memory:this.$memory.export(),sourceCode:e}];case 5:throw p=a.sent(),console.log(e),console.error("Unable to compile following WAT code:",p),console.log(e.split("\n").map((function(t,e){return"".concat("".concat(e+1).padStart(4," ")," ").concat(t)})).join("\n")),Error(p);case 6:return[2]}var d}))}))},e}(s.default);function h(t){return function(e){return console.log("[WASM]  ",t[e])}}e.default=p},9364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this._functions={},this.current=""}return t.prototype.get=function(t){t||(t=this.current);var e=this._functions[t];if(!e)throw Error('There is no function with name "'.concat(t,'"!\nPossible names are: ').concat(Object.keys(this._functions).map((function(t){return'"'.concat(t,'"')})).join(", ")));return e},t.prototype.add=function(t){if(this._functions[t.name])throw Error('There is already a function with name "'.concat(t.name,'"!'));this._functions[t.name]=t},t}();e.default=n},2283:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=n(1135);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return r(o).default}})},2177:function(t,e,n){"use strict";var r=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=i(n(9364)),c=i(n(5500)),s=i(n(2905)),u=function(){function t(){this._id=1,this._textResources=[],this.$functions=new a.default,this.$params=new s.default,this.$locals=new c.default}return Object.defineProperty(t.prototype,"$textResources",{get:function(){return o([],r(this._textResources),!1)},enumerable:!1,configurable:!0}),t.prototype.$addTextResource=function(t){return this._textResources.includes(t)||this._textResources.push(t),this._textResources.indexOf(t)},t.prototype.$makeId=function(t){return"".concat(t,"_").concat(this._id++)},t}();e.default=u},5500:function(t,e){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this._locals={}}return Object.defineProperty(t.prototype,"current",{get:function(){return n({},this._locals)},set:function(t){this._locals=n({},t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"available",{get:function(){var t=Object.keys(this._locals);return 0===t.length?"No local defined in this function.":"Available locals are: ".concat(t.map((function(t){return"$".concat(t)})).join(", "),".")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"all",{get:function(){return Object.keys(this._locals).map(o)},enumerable:!1,configurable:!0}),t.prototype.clear=function(){this._locals={}},t.prototype.add=function(t,e){t=o(t);var n=this._locals[t];if(n){if(e!==n)throw Error("$".concat(t,' has already been defined with type "').concat(n,'"!\nYou are trying to redefined it with type "').concat(e,'".'));return void 0!==this._locals[t]}this._locals[t]=e},t.prototype.has=function(t){return t=o(t),void 0!==this._locals[t]},t.prototype.get=function(t){t=o(t);var e=this._locals[t];if(!e)throw Error("No local was declared with the name $".concat(t,"!\nPossible names are: ").concat(Object.keys(this._locals).map((function(t){return'"'.concat(t,'"')})).join(", ")));return e},t}();function o(t){return"$"===t.charAt(0)?t.substring(1):t}e.default=r},2905:function(t,e){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this._params={}}return Object.defineProperty(t.prototype,"current",{get:function(){return n({},this._params)},set:function(t){this._params=n({},t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"available",{get:function(){var t=Object.keys(this._params);return 0===t.length?"No param defined in this function.":"Available params are: ".concat(t.map((function(t){return"$".concat(t)})).join(", "),".")},enumerable:!1,configurable:!0}),t.prototype.has=function(t){return t=o(t),void 0!==this._params[t]},t.prototype.get=function(t){t=o(t);var e=this._params[t];if(!e)throw Error("No param was declared with the name $".concat(t,"!\nPossible names are: ").concat(Object.keys(this._params).map((function(t){return'"'.concat(t,'"')})).join(", ")));return e},t}();function o(t){return"$"===t.charAt(0)?t.substring(1):t}e.default=r},2821:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t,e){return function(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];return{type:t,code:r(r([],n(o.map((function(n){return e.ensureInstr(n,t)}))),!1),n(i(o.length-1,"".concat(t,".add"))),!1)}}}function i(t,e){for(var n=[],r=0;r<t;r++)n.push(e);return n}e.default=function(t){this.prg=t,this.i32=o("i32",this.prg),this.i64=o("i64",this.prg),this.f32=o("f32",this.prg),this.f64=o("f64",this.prg)}},2049:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t,e){return function(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];return{type:t,code:r(r([],n(o.map((function(n){return e.ensureInstr(n,t)}))),!1),n(i(o.length-1,"i32.and")),!1)}}}function i(t,e){for(var n=[],r=0;r<t;r++)n.push(e);return n}e.default=function(t){this.prg=t,this.i32=o("i32",this.prg),this.bool=o("bool",this.prg)}},1701:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t){return function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];return{type:t,code:r([],n(e),!1)}}}e.default=function(){this.void=o("void"),this.bool=o("bool"),this.i32=o("i32"),this.i64=o("i64"),this.f32=o("f32"),this.f64=o("f64")}},9457:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t){return function(e){for(var o=r([],n(e),!1),i=0;i<e.length-1;i++)o.push("i32.".concat(t));return{type:"bool",code:o}}}e.default=function(){this.and=o("and"),this.or=o("or"),this.xor=o("xor")}},9169:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(7645)),i=n(8458),a=n(4958);function c(t,e){return function(n){try{var r=[";; Calc: ".concat(n)],a=new o.default(e).buildTree(n);return s(r,a,n),(0,i.generateConvert)(r,a.type,t,a.alwaysPositive),{type:t,code:r}}catch(t){throw console.log("Error in code: ",n),console.error(t),t}}}function s(t,e,n){try{switch(e.kind){case"err":throw Error("".concat(e.message,"\nError occured at position ").concat(e.index,' in\n"').concat(n,'"\n ').concat(function(t){for(var e="",n=0;n<t;n++)e="".concat(e," ");return e}(e.index),"^"));case"num":return void t.push("".concat(e.type,".const ").concat(e.value));case"var":return void t.push("local.get ".concat(e.name));case"ope":return function(t,e,n){switch(e.code){case"add":case"div":case"mul":case"sub":s(t,e.a,n),(0,i.generateConvert)(t,e.a.type,e.type,e.alwaysPositive),s(t,e.b,n),(0,i.generateConvert)(t,e.b.type,e.type,e.alwaysPositive);break;case"and":case"or":case"xor":s(t,e.a,n),(0,i.generateConvertInteger)(t,e.a.type,e.type,e.alwaysPositive),s(t,e.b,n),(0,i.generateConvertInteger)(t,e.b.type,e.type,e.alwaysPositive);break;case"le":case"ge":case"lt":case"gt":var r=(0,a.maxType)(e.code,e.a.type,e.b.type);s(t,e.a,n),(0,i.generateConvert)(t,e.a.type,r,e.alwaysPositive),s(t,e.b,n),(0,i.generateConvert)(t,e.b.type,r,e.alwaysPositive),"i"===r.charAt(0)&&(e.code="".concat(e.code,"_").concat(e.a.alwaysPositive&&e.b.alwaysPositive?"u":"s")),e.type=r}}(t,e,n),void t.push("".concat(e.type,".").concat(e.code));case"memory":if("num"===e.index.kind)t.push("i32.const ".concat(e.bufferOffset+e.bpe*e.index.value));else{switch(s(t,e.index,n),e.bpe){case 1:break;case 2:t.push("i32.const 1","i32.shl");break;case 4:t.push("i32.const 2","i32.shl");break;case 8:t.push("i32.const 3","i32.shl");break;default:t.push("i32.const ".concat(e.bpe),"i32.mul")}e.bufferOffset>0&&t.push("i32.const ".concat(e.bufferOffset),"i32.add")}return void t.push("".concat(e.type,".load").concat(e.extension));default:throw Error('Unknown scanner item "'.concat(e.kind,'"!'))}}catch(t){throw console.error("Unable to evaluate:",n),console.error(t),t}}e.default=function(t){this.prg=t,this.i32=c("i32",this.prg),this.i64=c("i64",this.prg),this.f32=c("f32",this.prg),this.f64=c("f64",this.prg)}},8458:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateConvertInteger=e.generateConvert=void 0,e.generateConvert=function(t,e,n,r){if(void 0===r&&(r=!1),"bool"===e&&(e="i32"),"bool"===n&&(n="i32"),e!==n){var o=r?"u":"s";switch(e){case"i32":switch(n){case"i64":return void t.push("i64.extend_i32_".concat(o));case"f32":return void t.push("f32.convert_i32_".concat(o));case"f64":return void t.push("f64.convert_i32_".concat(o))}return;case"i64":switch(n){case"i32":return void t.push("i32.wrap_i64");case"f32":return void t.push("f32.convert_i64_".concat(o));case"f64":return void t.push("f64.convert_i64_".concat(o))}return;case"f32":switch(n){case"i32":return void t.push("i32.trunc_f32_".concat(o));case"i64":return void t.push("i64.trunc_f32_".concat(o));case"f64":return void t.push("f64.promote_f32")}return;case"f64":switch(n){case"i32":return void t.push("i32.trunc_f64_".concat(o));case"i64":return void t.push("i64.trunc_f64_".concat(o));case"f32":return void t.push("f32.demote_f64")}}}},e.generateConvertInteger=function(t,e,n,r){if(void 0===r&&(r=!1),"bool"===e&&(e="i32"),"bool"===n&&(n="i32"),e!==n){var o=r?"u":"s";switch(e){case"i32":switch(n){case"i64":return void t.push("i64.extend_i32_".concat(o));case"f64":return void t.push("i64.trunc_f64_".concat(o));case"f32":t.push("i32.trunc_f32_".concat(o))}return;case"i64":switch(n){case"i32":return void t.push("i32.wrap_i32");case"f32":return void t.push("i32.trunc_f32_".concat(o));case"f64":return void t.push("i64.trunc_f64_".concat(o))}return;case"f32":switch(n){case"i32":return void t.push("i32.trunc_f64_".concat(o));case"i64":return void t.push("i64.trunc_f64_".concat(o));case"f32":return void t.push("i32.trunc_f32_".concat(o))}return}}}},4576:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=n(9169);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return r(o).default}})},621:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.checkToken=e.parseTokens=void 0;var o={SPC:/^[ \t\n\r]+/g,VAR:/^\$[a-z][a-z0-9_]*/gi,PAR_OPEN:/^[(]/g,PAR_CLOSE:/^[)]/g,BRA_OPEN:/^\[/g,BRA_CLOSE:/^\]/g,OFFSET:/^@([a-z][a-z0-9_]*)?/gi,LE:/^\<\=/g,GE:/^\>\=/g,LT:/^\</g,GT:/^\>/g,ADD:/^\+/g,SUB:/^\-/g,MUL:/^\*/g,DIV:/^\//g,MOD:/^\%/g,AND:/^\&/g,OR:/^\|/g,XOR:/^\^/g,HEX:/^0x[0-9a-f]+/gi,NUM:/^[-]?[0-9]+(\.[0-9]+)?([eE][-]?[0-9]+)?/g};function i(t,e){var n,i;try{for(var c=r(Object.keys(o)),s=c.next();!s.done;s=c.next()){var u=s.value,l=a(t,e,u);if(l)return[u,l,e]}}catch(t){n={error:t}}finally{try{s&&!s.done&&(i=c.return)&&i.call(c)}finally{if(n)throw n.error}}throw Error("Unexpected token at position ".concat(e,': "').concat(t.substring(e),'"\n"').concat(t,'"'))}function a(t,e,n){var r=o[n];if(!r)throw Error('Token "'.concat(n,'" does not exist!'));r.lastIndex=-1;var i=r.exec(t.substring(e));return i?i[0]:null}e.parseTokens=function(t){for(var e=[],o=0;o<t.length;){var a=n(i(t,o),2),s=a[0],u=a[1],l=o;o+=u.length,"SPC"!==s&&e.push([s,u,l])}return function(t){var e,o,i=[],a=!0,s=!1;try{for(var u=r(t),l=u.next();!l.done;l=u.next()){var f=n(l.value,3),p=f[0],h=f[1],d=f[2];"SUB"===p?a?(i.push([p,h,d]),a=!1):s=!0:(s&&"NUM"===p?i.push(["NUM","".concat(-parseFloat(h)),d]):s&&"HEX"===p?i.push(["NUM","".concat(-parseInt(h)),d]):i.push([p,h,d]),s="SUB"===p),a=c.includes(p)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}return i}(e)},e.checkToken=a;var c=["VAR","PAR_CLOSE","BRA_CLOSE","OFFSET","HEX","NUM"]},4958:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a};function r(t){return"bool"===t&&(t="i32"),[t.charAt(0),parseInt(t.substring(1))]}Object.defineProperty(e,"__esModule",{value:!0}),e.maxType=void 0,e.maxType=function(t,e,o){switch(t){case"add":case"div":case"mul":case"sub":case"lt":case"gt":case"le":case"ge":return function(t,e){if("bool"===t&&"bool"===e)return"bool";var o=n(r(t),2),i=o[0],a=o[1],c=n(r(e),2),s=c[0],u=c[1];return"".concat("f"===i||"f"===s?"f":"i").concat(Math.max(a,u))}(e,o);case"and":case"or":case"xor":return function(t,e){if("bool"===t&&"bool"===e)return"i32";var o=n(r(t),2),i=(o[0],o[1]),a=n(r(e),2),c=(a[0],a[1]);return"i".concat(Math.max(i,c))}(e,o);default:throw Error("Don't know how to find maxType for operation \"".concat(t,'"!'))}}},7645:function(t,e,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},r.apply(this,arguments)},o=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.optimizeTree=void 0;var a=n(4958),c=n(621),s={"+":"add","-":"sub","*":"mul","/":"div","&":"and","|":"or","^":"xor","<":"lt",">":"gt"},u=function(){function t(t){this.prg=t}return t.prototype.buildTree=function(t){var e=function(t){var e,n,r=(0,c.parseTokens)(t),a=0;try{for(var s=i(r),u=s.next();!u.done;u=s.next()){var l=o(u.value,1)[0];"PAR_OPEN"===l?a++:"PAR_CLOSE"===l&&a--}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}if(0!==a)throw Error('Unbalanced parenthesis!\n"'.concat(t,'"'));return r}(t);return p(this.scan(e))},t.prototype.scan=function(t){for(var e,n,o,i,c,s=null!==(c=null!==(i=null!==(o=null!==(n=null!==(e=this.scanNum(t))&&void 0!==e?e:this.scanHex(t))&&void 0!==n?n:this.scanMonoBloc(t))&&void 0!==o?o:this.scanVar(t))&&void 0!==i?i:this.scanMemory(t))&&void 0!==c?c:f("Unexpected token!",t[0]);;){var u=this.scanOpe(t);if(!u)break;var l=this.scan(t);if(!l)return f('Missing argument for binary operator "'.concat(u.code,'"!'),t[0]);var p=s;s=r(r({},u),{alwaysPositive:p.alwaysPositive||l.alwaysPositive,type:(0,a.maxType)(u.code,p.type,l.type),a:p,b:l})}return s},t.prototype.scanMonoBloc=function(t){var e=this.scanBloc(t);if(!e)return null;if(1!==e.length)throw Error("There is more than one ");return e[0]},t.prototype.scanBloc=function(t){if(!l(t,"PAR_OPEN"))return null;for(var e=[];!l(t,"PAR_CLOSE");)e.push(this.scan(t));return e},t.prototype.scanOffset=function(t){var e=l(t,"OFFSET");if(!e)return null;var n=e.substring(1),r=(this.prg.$memory.offset(n),this.prg.$memory.type(n),this.prg.$memory);return{kind:"offset",alwaysPositive:r.isAlwaysPositive(n),bufferName:n,offset:r.offset(n),bpe:r.bpe(n),type:r.type(n),extension:r.extension(n)}},t.prototype.scanMemory=function(t){var e=this.scanOffset(t);if(!e)return null;if(!l(t,"BRA_OPEN"))throw Error('To access a memory element, we expect a open bracket!\nSomething like "@[3]" or "@bank2[0].');for(var n=[];!l(t,"BRA_CLOSE");)n.push(this.scan(t));if(1!==n.length)throw Error("Only one expression is allowed in brackets!");var r=o(n,1)[0],i=e.alwaysPositive,a=e.bufferName,c=e.extension,s=e.bpe,u=e.type;return{kind:"memory",bufferName:a,bufferOffset:e.offset,index:r,bpe:s,extension:c,alwaysPositive:i,type:u}},t.prototype.scanOpe=function(t){var e,n=l(t,"LE","GE","LT","GT","ADD","SUB","MUL","DIV","AND","OR","XOR");return n?{kind:"ope",code:null!==(e=s[n])&&void 0!==e?e:"?"}:null},t.prototype.scanNum=function(t){var e=l(t,"NUM");if(!e)return null;var n=parseFloat(e);return{kind:"num",type:n===Math.floor(n)?"i32":"f32",alwaysPositive:!(n<0),value:n}},t.prototype.scanHex=function(t){var e=l(t,"HEX");return e?{kind:"num",type:"i32",alwaysPositive:!0,value:parseInt(e)}:null},t.prototype.scanVar=function(t){var e=l(t,"VAR");if(!e)return null;var n=this.prg;return n.$params.has(e)?{kind:"var",type:n.$params.get(e),alwaysPositive:!1,name:e}:n.$locals.has(e)?{kind:"var",type:n.$locals.get(e),alwaysPositive:!1,name:e}:f("".concat(e," is not a param nor a local!\n").concat(n.$params.available,"\n").concat(n.$locals.available),t[0])},t}();function l(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=o(t,1),i=r[0];if(!i)return null;var a=o(i,2),c=a[0],s=a[1];return e.includes(c)?(t.shift(),s):null}function f(t,e){return console.error(t,e),{kind:"err",type:"bool",alwaysPositive:!0,message:t,index:e[2]}}function p(t){if("ope"!==t.kind)return t;if(t.a=p(t.a),t.b=p(t.b),"num"!==t.a.kind||"num"!==t.b.kind)return t;var e=t.a.value,n=t.b.value;t.type;switch(t.code){case"add":return h(e+n);case"sub":return h(e-n);case"mul":return h(e*n);case"div":return h(e/n);default:return t}}function h(t,e){return{kind:"num",type:t===Math.floor(t)?"i32":"f32",alwaysPositive:!(t<0),value:t}}e.default=u,e.optimizeTree=p},256:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t,e){return function(o){for(var i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];var c=e.$functions.get(o);if(c.type!==t)throw Error('Function "'.concat(o,'" returns "').concat(c.type,'" and not "').concat(t,'"!'));var s=Object.keys(c.params);if(i.length!==s.length)throw Error('Function "'.concat(o,'" expects ').concat(s.length," params and not ").concat(i.length,"!"));for(var u=0;u<s.length;u++){var l=i[u],f=s[u],p=c.params[f],h=l.type;if(h!==p)throw Error('Param "'.concat(f,'" of function "').concat(o,'" must be of type "').concat(p,'" and not "').concat(h,'"!'))}return{type:t,code:r(r([";; Call ".concat(o,"()")],n(i),!1),["call $".concat(o)],!1)}}}e.default=function(t){this.prg=t,this.void=o("void",this.prg),this.bool=o("bool",this.prg),this.i32=o("i32",this.prg),this.i64=o("i64",this.prg),this.f32=o("f32",this.prg),this.f64=o("f64",this.prg)}},9644:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t){return function(e){return{type:t,code:"".concat(t,".const ").concat(e)}}}e.default=function(){this.i32=n("i32"),this.i64=n("i64"),this.f32=n("f32"),this.f64=n("f64")}},693:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){void 0===r&&(r=1),e.$locals.add(n,t);var o="number"==typeof r?"".concat(t,".const ").concat(r):r;return{type:t,code:["local.get $".concat(n),o,"".concat(t,".sub"),"local.tee $".concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},8138:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){void 0===r&&(r=1),e.$locals.add(n,t);var o="number"==typeof r?"".concat(t,".const ").concat(r):r;return{type:"void",code:["local.get $".concat(n),o,"".concat(t,".sub"),"local.set $".concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},1572:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.prg=t}return t.prototype.params=function(t){return void 0===t&&(t={}),this.prg.$params.current=t,this.prg.$locals.clear(),{type:"declaration",code:Object.entries(t).map((function(t){var e=n(t,2),r=e[0],o=e[1];return"(param $".concat(r," ").concat(o,")")})).join(" ")}},t}();e.default=r},4339:function(t,e){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)},r=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.prg=t,this.func={void:a("void",this.prg),i32:a("i32",this.prg),i64:a("i64",this.prg),f32:a("f32",this.prg),f64:a("f64",this.prg)}}return t.prototype.module=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=["(module",'(import "log" "i32" (func $_log_i32 (param i32 i32)))','(import "log" "i64" (func $_log_i64 (param i32 i64)))','(import "log" "f32" (func $_log_f32 (param i32 f32)))','(import "log" "f64" (func $_log_f64 (param i32 f64)))','(import "log" "text" (func $_log_text (param i32)))'],i=this.prg.$memory.sizeInPages;return i>0&&n.push('(memory (import "env" "mem") '.concat(i,")")),n.push.apply(n,o(o([],r(t),!1),[")"],!1)),{type:"module",code:n}},t.prototype.branch=function(t,e){return e?{type:"void",code:[e,"br_if $".concat(t)]}:{type:"void",code:"br $".concat(t)}},t.prototype.repeat=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i=this.prg,a=i.$makeId("block");return{type:"void",code:["(loop $".concat(a),o(o([],r(e),!1),[i.dec.i32(t),this.branch(a,i.is.positive.i32(i.get.i32(t)))],!1),")"]}},t}();function a(t,e){return function(i){for(var a,c=[],s=1;s<arguments.length;s++)c[s-1]=arguments[s];var u=n(n({name:"main",export:!1},i),{params:e.$params.current,type:t});e.$functions.add(u);var l=c.filter((function(t){return"declaration"===t.type}));if(l.length>1)throw Error("A function cannot have more than one declaration instruction!");var f=c.filter((function(t){return"declaration"!==t.type}));"main"===u.name&&(u.export=!0);var p=r(l,1),h=p[0],d=null!==(a=null==h?void 0:h.code)&&void 0!==a?a:"";return{type:"func",code:["(func $".concat(u.name).concat(u.export?' (export "'.concat(u.name,'")'):""," ").concat(d).concat("void"===t?"":" (result ".concat(t,")")),o([e.$locals.all.map((function(t){return"(local $".concat(t," ").concat(e.$locals.get(t),")")})).join(" ")],r(f),!1),")"]}}}e.default=i},7779:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n){return e.$locals.add(n,t),{type:t,code:"local.get $".concat(n)}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},4512:function(t,e){"use strict";var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});function o(t,e){return function(o,i,a){var c=r(r([e.ensureInstr(o,"bool"),"(if","(then"],n(i),!1),[")"],!1);return a&&c.push.apply(c,r(r(["(else"],n(a),!1),[")"],!1)),c.push(")"),{type:t,code:c}}}e.default=function(t){this.prg=t,this.void=o("void",this.prg),this.bool=o("bool",this.prg),this.i32=o("i32",this.prg),this.i64=o("i64",this.prg),this.f32=o("f32",this.prg),this.f64=o("f64",this.prg)}},4055:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){void 0===r&&(r=1),e.$locals.add(n,t);var o="number"==typeof r?"".concat(t,".const ").concat(r):r;return{type:t,code:["local.get $".concat(n),o,"".concat(t,".add"),"local.tee $".concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},3440:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){return void 0===r&&(r=1),e.$locals.add(n,t),{type:"void",code:["local.get $".concat(n),e.ensureInstr(r,t),"".concat(t,".add"),"local.set $".concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},8591:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t){return function(e,n){return{type:"bool",code:[e,n,"".concat(t,".ne")]}}}e.default=function(){this.i32=n("i32"),this.i64=n("i64"),this.f32=n("f32"),this.f64=n("f64")}},3028:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t){return function(e,n){return{type:"bool",code:[e,n,"".concat(t,".eq")]}}}e.default=function(){this.i32=n("i32"),this.i64=n("i64"),this.f32=n("f32"),this.f64=n("f64")}},6127:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return void 0===e&&(e=""),function(n,r){return{type:"bool",code:[n,r,"".concat(t,".ge").concat(e)]}}}e.default=function(){this.ui32=n("i32","_u"),this.ui64=n("i64","_u"),this.si32=n("i32","_s"),this.si64=n("i64","_s"),this.f32=n("f32"),this.f64=n("f64")}},3909:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e,n){return void 0===n&&(n=""),function(r,o){return{type:"bool",code:[t.ensureInstr(r,e),t.ensureInstr(o,e),"".concat(e,".gt").concat(n)]}}}e.default=function(t){this.prg=t,this.ui32=n(this.prg,"i32","_u"),this.ui64=n(this.prg,"i64","_u"),this.si32=n(this.prg,"i32","_s"),this.si64=n(this.prg,"i64","_s"),this.f32=n(this.prg,"f32"),this.f64=n(this.prg,"f64")}},1856:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(8591)),i=r(n(3028)),a=r(n(3909)),c=r(n(6127)),s=r(n(4959)),u=r(n(4614)),l=r(n(1725)),f=r(n(459)),p=r(n(3120));e.default=function(t){this.prg=t,this.different=new o.default,this.equal=new i.default,this.greater=new a.default(this.prg),this.greaterOrEqual=new c.default,this.lesser=new s.default(this.prg),this.lesserOrEqual=new u.default,this.negative=new l.default,this.positive=new f.default,this.zero=new p.default}},4614:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return void 0===e&&(e=""),function(n,r){return{type:"bool",code:[n,r,"".concat(t,".le").concat(e)]}}}e.default=function(){this.ui32=n("i32","_u"),this.ui64=n("i64","_u"),this.si32=n("i32","_s"),this.si64=n("i64","_s"),this.f32=n("f32"),this.f64=n("f64")}},4959:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e,n){return void 0===n&&(n=""),function(r,o){return{type:"bool",code:[t.ensureInstr(r,e),t.ensureInstr(o,e),"".concat(e,".lt").concat(n)]}}}e.default=function(t){this.prg=t,this.ui32=n(this.prg,"i32","_u"),this.ui64=n(this.prg,"i64","_u"),this.si32=n(this.prg,"i32","_s"),this.si64=n(this.prg,"i64","_s"),this.f32=n(this.prg,"f32"),this.f64=n(this.prg,"f64")}},1725:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return void 0===e&&(e=""),function(n){return{type:"bool",code:[n,"".concat(t,".const 0"),"".concat(t,".lt").concat(e," ;; Is strictly negative?")]}}}e.default=function(){this.i32=n("i32","_s"),this.i64=n("i64","_s"),this.f32=n("f32"),this.f64=n("f64")}},459:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return void 0===e&&(e=""),function(n){return{type:"bool",code:[n,"".concat(t,".const 0"),"".concat(t,".gt").concat(e," ;; Is strictly positive?")]}}}e.default=function(){this.i32=n("i32","_s"),this.i64=n("i64","_s"),this.f32=n("f32"),this.f64=n("f64")}},3120:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t){return function(e){return{type:"bool",code:[e,"".concat(t,".eqz")]}}}e.default=function(){this.i32=n("i32"),this.i64=n("i64")}},5391:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.prg=t}return t.prototype.local=function(t){var e=this.prg.$locals.get(t),n="Local $".concat(t," (").concat(e,") =="),r=this.prg.$addTextResource(n);return{type:"void",code:["i32.const ".concat(r,' ;; "').concat(n,'"'),"local.get $".concat(t),"call $_log_".concat(e)]}},t.prototype.param=function(t){var e=this.prg.$params.get(t),n="Param $".concat(t," (").concat(e,") =="),r=this.prg.$addTextResource(n);return{type:"void",code:["i32.const ".concat(r,' ;; "').concat(n,'"'),"local.get $".concat(t),"call $_log_".concat(e)]}},t.prototype.text=function(t){var e=this.prg.$addTextResource(t);return{type:"void",code:["i32.const ".concat(e,' ;; "').concat(t,'"'),"call $_log_text"]}},t}();e.default=n},3727:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){return{type:t,code:[e.ensureInstr(n,t),e.ensureInstr(r,t),"".concat(t,".mul")]}}}e.default=function(t){this.prg=t,this.i32=n("i32",this.prg),this.i64=n("i64",this.prg),this.f32=n("f32",this.prg),this.f64=n("f64",this.prg)}},5169:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n){return{type:e,code:[n,"".concat(t,".nearest")]}}}e.default=function(){this.i32=n("f32","i32"),this.i64=n("f64","i64")}},7125:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n){var r=e.$params.get(n);if(r!==t)throw Error("Param $".concat(n,' is of type "').concat(r,'" an not "').concat(t,'"!'));return{type:t,code:"local.get $".concat(n)}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},3911:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e,n){return void 0===n&&(n=""),function(r){var o=e.ensureInstr(r,"i32");return e.$addTextResource("peek at "),{type:t,code:[o,"".concat(t,".load").concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i32For8s=n("i32",t,"8_s"),this.i32For8u=n("i32",t,"8_u"),this.i32For16s=n("i32",t,"16_s"),this.i32For16u=n("i32",t,"16_u"),this.i64=n("i64",t),this.i64For8s=n("i64",t,"8_s"),this.i64For8u=n("i64",t,"8_u"),this.i64For16s=n("i64",t,"16_s"),this.i64For16u=n("i64",t,"16_u"),this.i64For32s=n("i64",t,"32_s"),this.i64For32u=n("i64",t,"32_u"),this.f32=n("f32",t),this.f64=n("f64",t)}},9467:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e,n){return void 0===n&&(n=""),function(o,i,a){return{type:"void",code:[r(e,o,a),e.ensureInstr(i,t),"".concat(t,".store").concat(n)]}}}function r(t,e,n){var r=function(t,e,n){var r=t.$memory.bpe(n);switch(r){case 1:return e;case 2:return t.shl.i32(e,"1");case 4:return t.shl.i32(e,"2");case 8:return t.shl.i32(e,"3");default:return t.mul.i32(r,e)}}(t,t.ensureInstr(e,"i32"),n),o=t.$memory.offset(n);return 0===o?r:t.add.i32(o,r)}e.default=function(t){this.i32=n("i32",t),this.i32For8=n("i32",t,"8"),this.i32For16=n("i32",t,"16"),this.i64=n("i64",t),this.i64For8=n("i64",t,"8"),this.i64For16=n("i64",t,"16"),this.i64For32=n("i64",t,"32"),this.f32=n("f32",t),this.f64=n("f64",t)}},9044:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){void 0===r&&(r=0);var o=e.ensureInstr(r,t);return e.$locals.add(n,t),{type:t,code:[o,"(local.tee $".concat(n,")")]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},4213:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){void 0===r&&(r=0);var o=e.ensureInstr(r,t);return e.$locals.add(n,t),{type:"void",code:[o,"local.set $".concat(n)]}}}e.default=function(t){this.i32=n("i32",t),this.i64=n("i64",t),this.f32=n("f32",t),this.f64=n("f64",t)}},2501:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){return{type:t,code:[e.ensureInstr(n,t),e.ensureInstr(r,t),"".concat(t,".shl")]}}}e.default=function(t){this.prg=t,this.i32=n("i32",this.prg),this.i64=n("i64",this.prg)}},661:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});function n(t,e){return function(n,r){return{type:t,code:[e.ensureInstr(n,t),e.ensureInstr(r,t),"".concat(t,".sub")]}}}e.default=function(t){this.prg=t,this.i32=n("i32",this.prg),this.i64=n("i64",this.prg),this.f32=n("f32",this.prg),this.f64=n("f64",this.prg)}},8899:function(t,e){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){var e,r,s,u,l;void 0===t&&(t={}),this.memoryItems=new Map,this.nameOfFirstMemoryBank=null!==(l=Object.keys(t)[0])&&void 0!==l?l:"";var f=0;try{for(var p=n(Object.keys(t)),h=p.next();!h.done;h=p.next()){var d=h.value,y=t[d];try{this.memoryItems.set(d,{data:y,offset:f,type:i(y),alwaysPositive:a(y),bpe:y.BYTES_PER_ELEMENT,extension:c(y)}),f+=y.byteLength}catch(t){throw console.error(y),Error('Unable to parse memory bank "'.concat(d,'":\n').concat(t))}}}catch(t){e={error:t}}finally{try{h&&!h.done&&(r=p.return)&&r.call(p)}finally{if(e)throw e.error}}this.sizeInBytes=f,this.sizeInPages=Math.ceil(f/65536);var v=new WebAssembly.Memory({initial:this.sizeInPages,maximum:this.sizeInPages}),_=v.buffer;try{for(var b=n(this.memoryItems.values()),m=b.next();!m.done;m=b.next()){var g=m.value;y=g.data,o(_,g.offset,y).set(y)}}catch(t){s={error:t}}finally{try{m&&!m.done&&(u=b.return)&&u.call(b)}finally{if(s)throw s.error}}this.wasmMemory=v}return t.prototype.export=function(){var t,e,r={},i=this.wasmMemory.buffer,a=this.memoryItems;try{for(var c=n(a.keys()),s=c.next();!s.done;s=c.next()){var u=s.value,l=a.get(u);if(!l)throw Error("Impossible error!\nCan't find memory bank \"".concat(u,'".'));var f=l.data,p=l.offset;r[u]=o(i,p,f)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}return r},t.prototype.offset=function(t){return this.find(t).offset},t.prototype.type=function(t){return this.find(t).type},t.prototype.extension=function(t){return this.find(t).extension},t.prototype.isAlwaysPositive=function(t){return this.find(t).alwaysPositive},t.prototype.bpe=function(t){return this.find(t).bpe},t.prototype.find=function(t){"string"==typeof t&&0!==t.length||(t=this.nameOfFirstMemoryBank);var e=this.memoryItems.get(t);if(e)return e;this.throwUnknownMemoryNameError(t)},t.prototype.throwUnknownMemoryNameError=function(t){var e=Array.of(this.memoryItems.keys());if(0===e.length)throw Error('You asked for memory bank "'.concat(t,'",\nbut no memory has been defined for this program!'));throw Error('There is no memory bank named "'.concat(t,'"!\nPossible names are: ').concat(e.map((function(t){return'"n"'})).join(", "),"."))},t}();function o(t,e,n){if(n instanceof Float32Array)return new Float32Array(t,e,n.length);if(n instanceof Uint8ClampedArray)return new Uint8ClampedArray(t,e,n.length);if(n instanceof Int32Array)return new Int32Array(t,e,n.length);throw console.error("Unknown array type:",n),Error("Unknown array type!")}function i(t){if(t instanceof Float32Array)return"f32";if(t instanceof Uint8ClampedArray)return"i32";if(t instanceof Int32Array)return"i32";throw console.error("Unknown array type:",t),Error("Unknown array type!")}function a(t){if(t instanceof Float32Array)return!1;if(t instanceof Uint8ClampedArray)return!0;if(t instanceof Int32Array)return!0;throw console.error("Unknown array type:",t),Error("Unknown array type!")}function c(t){if(t instanceof Float32Array)return"";if(t instanceof Uint8ClampedArray)return"8_u";if(t instanceof Int32Array)return"";throw console.error("Unknown array type:",t),Error("Unknown array type!")}e.default=r},9922:function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},a=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=c(n(2821)),u=c(n(2049)),l=c(n(1701)),f=c(n(9457)),p=c(n(4576)),h=c(n(256)),d=c(n(2283)),y=c(n(9644)),v=c(n(8138)),_=c(n(693)),b=c(n(1572)),m=c(n(4339)),g=c(n(7779)),w=c(n(4512)),A=c(n(3440)),x=c(n(4055)),O=c(n(1856)),P=c(n(5391)),j=c(n(3727)),$=c(n(5169)),k=c(n(7125)),I=c(n(3911)),M=c(n(9467)),C=c(n(4213)),E=c(n(9044)),B=c(n(2501)),S=c(n(661)),T=function(t){function e(e){void 0===e&&(e={});var n=t.call(this,e)||this;return n.add=new s.default(n),n.and=new u.default(n),n.bloc=new l.default,n.bool=new f.default,n.calc=new p.default(n),n.call=new h.default(n),n.const=new y.default,n.dec=new v.default(n),n.decAndGet=new _.default(n),n.declare=new b.default(n),n.flow=new m.default(n),n.get=new g.default(n),n.inc=new A.default(n),n.incAndGet=new x.default(n),n.if=new w.default(n),n.is=new O.default(n),n.log=new P.default(n),n.mul=new j.default(n),n.nearest=new $.default,n.param=new k.default(n),n.peek=new I.default(n),n.poke=new M.default(n),n.set=new C.default(n),n.setAndGet=new E.default(n),n.shl=new B.default(n),n.sub=new S.default(n),n}return o(e,t),e.prototype.comment=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return{type:"void",code:a(a(["(;"],i(t),!1),[";)"],!1)}},e.prototype.ensureInstr=function(t,e){if("string"==typeof t)switch(e){case"bool":case"i32":return this.calc.i32(t);case"i64":return this.calc.i64(t);case"f32":return this.calc.f32(t);case"f64":return this.calc.f64(t);default:throw Error('Unknown type "'.concat(e,'"!'))}return"number"!=typeof t?t:{type:e,code:"".concat(e,".const ").concat(t)}},e}(d.default);e.default=T},8350:function(t,e){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.stringifyCode=void 0,e.stringifyCode=function t(e,r){var o,i;if(void 0===r&&(r={indent:0}),"string"==typeof e){var a=0;try{for(var c=n(e),s=c.next();!s.done;s=c.next()){var u=s.value;"("===u?a++:")"===u&&a--}}catch(t){o={error:t}}finally{try{s&&!s.done&&(i=c.return)&&i.call(c)}finally{if(o)throw o.error}}a<0&&(r.indent+=a);var l=function(t){for(var e="",n=0;n<t;n++)e+="  ";return e}(r.indent);return a>0&&(r.indent+=a),"".concat(l).concat(e,"\n")}if(Array.isArray(e))return e.map((function(e){return t(e,r)})).join("");e.before&&(console.log("HSDGKKKKKKKKKKKKKKKKKKKK"),e.before());var f=t(e.code,r);return e.after&&e.after(),f}},1801:()=>{},8094:()=>{}},t=>{t.O(0,[977],(()=>(5796,t(t.s=5796)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,