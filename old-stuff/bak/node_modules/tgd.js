/**
 * Effectuer un document.querySelector().
 */
function $(selector) {
    var elem = typeof selector === 'string' ? window.document.querySelector(selector) : selector;
    if (!elem) {
        throw new Error("Bad selector: \"" + selector + "\"!");
    }
    return elem;
};


/**
 * Add slots for mouse touch events.
 * * __tap__:
 * * __touchstart__:
 * * __touchend__:
 * * __move__:
 */
function $events(element, slots) {
    element = $(element);
    var onTouchstart = function(evt) {
        if (slots.touchstart) {
            slots.touchstart({target: element, button: evt.button});
        }
    },
    onTouchend = function(evt) {
        evt.preventDefault();
        if (slots.touchend) {
            slots.touchend({target: element, button: evt.button});
        }
        if (slots.tap) {
            slots.tap({target: element, button: evt.button});
        }
    };
    slots._type = null;
    element.addEventListener(
        "touchstart",
        function(evt) {
            if (slots._type) return;
            slots._type = "T";
            onTouchstart(evt);
        }
    );
    element.addEventListener(
        "mousedown",
        function(evt) {
            if (slots._type) return;
            slots._type = "M";
            onTouchstart(evt);
        }
    );
    element.addEventListener(
        "touchend",
        function(evt) {
            if (slots._type == "T") {
                onTouchend(evt);
            }
            delete slots._type;
        }
    );
    element.addEventListener(
        "mouseup",
        function(evt) {
            if (slots._type == "M") {
                onTouchend(evt);
            }
            delete slots._type;
        }
    );
    element.addEventListener(
        "mousemove",
        function(evt) {
            if (typeof slots.move === 'function') {
                var canvas = evt.target;
                var x = evt.offsetX;
                var y = evt.offsetY;
                if (x === undefined) x = evt.layerX;
                if (y === undefined) y = evt.layerY;
                var rect = canvas.getBoundingClientRect();
                var cx = canvas.width / rect.width;
                var cy = canvas.height / rect.height;
                slots.move(
                    {
                        target: element, 
                        x: x * cx,
                        y: y * cy
                    }
                );
            }
        },
        false
    );
    return element;
};

function randint(a, b) {
    if (typeof b === 'undefined') {
        b = a;
        a = 0;
    }
    return a + Math.floor(Math.random() * (b - a));
}

function toInt(a, min, max) {
    var x = parseInt(a);
    if (isNaN(x)) return 0;
    if (typeof min !== 'undefined' && x < min) x = min;
    if (typeof max !== 'undefined' && x > max) x = max;
    return x;
}

function toFloat(a, min, max) {
    var x = parseFloat(a);
    if (isNaN(x)) return 0;
    if (typeof min !== 'undefined' && x < min) x = min;
    if (typeof max !== 'undefined' && x > max) x = max;
    return x;
}

exports.$ = $;
exports.$events = $events;
exports.toInt = toInt;
exports.toFloat = toFloat;
exports.randint = randint;

exports.init = function(initFunction) {
    window.addEventListener(
        'DOMContentLoaded',
        function() {
            var Runtime = require("tgd.runtime");
            var runtime = new Runtime();
            if (typeof initFunction === 'function') {
                initFunction.call(runtime);
            }
            runtime.start(window.main);
        }
    );
};
