/**
 * Effectuer un document.querySelector().
 */
function $(selector) {
    var elem = typeof selector === 'string' ? window.document.querySelector(selector) : selector;
    if (!elem) {
        throw new Error("Bad selector: \"" + selector + "\"!");
    }
    return elem;
};


/**
 * Add slots for mouse touch events.
 * * __tap__:
 * * __touchstart__:
 * * __touchend__:
 * * __move__:
 */
function $events(element, slots) {
    element = $(element);
    var onTouchstart = function(evt) {
        if (slots.touchstart) {
            slots.touchstart({target: element, button: evt.button});
        }
    },
    onTouchend = function(evt) {
        evt.preventDefault();
        if (slots.touchend) {
            slots.touchend({target: element, button: evt.button});
        }
        if (slots.tap) {
            slots.tap({target: element, button: evt.button});
        }
    };
    slots._type = null;
    element.addEventListener(
        "touchstart",
        function(evt) {
            if (slots._type) return;
            slots._type = "T";
            onTouchstart(evt);
        }
    );
    element.addEventListener(
        "mousedown",
        function(evt) {
            if (slots._type) return;
            slots._type = "M";
            onTouchstart(evt);
        }
    );
    element.addEventListener(
        "touchend",
        function(evt) {
            if (slots._type == "T") {
                onTouchend(evt);
            }
            delete slots._type;
        }
    );
    element.addEventListener(
        "mouseup",
        function(evt) {
            if (slots._type == "M") {
                onTouchend(evt);
            }
            delete slots._type;
        }
    );
    element.addEventListener(
        "mousemove",
        function(evt) {
            if (typeof slots.move === 'function') {
                slots.move({target: element, x: evt.offsetX, y: evt.offsetY});
            }
        },
        false
    );
    return element;
};




function toInt(a, min, max) {
    var x = parseInt(a);
    if (isNaN(x)) return 0;
    if (typeof min !== 'undefined' && x < min) x = min;
    if (typeof max !== 'undefined' && x > max) x = max;
    return x;
}

function toFloat(a, min, max) {
    var x = parseFloat(a);
    if (isNaN(x)) return 0;
    if (typeof min !== 'undefined' && x < min) x = min;
    if (typeof max !== 'undefined' && x > max) x = max;
    return x;
}

var Mobil = require("tgd-mobil.js");

exports.$ = $;
exports.$events = $events;
exports.Runtime = require("tgd-runtime");
exports.Mobil = require("tgd-mobil");

exports.start = function(f, canvas) {
    if (typeof canvas === 'undefined') canvas = '#CANVAS';
    canvas = $(canvas);
    var ctx = canvas.getContext("2d");
    var mouseButtons = [0,0,0];
    var images = {};
    var app = {};
    var runtime = {
        scene: f,
        timestamp: 0,
        deltaTimestamp: 0,
        context: ctx,
        mouseButtons: [0, 0, 0],
        pointerX: -1,
        pointerY: -1,
        mobils: [],
        newMobil: function(options) {
            var mobil = new Mobil(options);
            runtime.mobils.push(mobil);
            return mobil;
        },
        rgba: function(r,g,b,a) {
            return "rgba(" + toInt(r, 0, 255)
                + "," + toInt(g, 0, 255)
                + "," + toInt(b, 0, 255)
                + "," + toFloat(a, 0, 1) + ")";
        },
        rgb: function(r,g,b) {
            return "rgb(" + toInt(r, 0, 255)
                + "," + toInt(g, 0, 255)
                + "," + toInt(b, 0, 255) + ")";
        },
        image: function(id) {
            return images[id];
        },
        loadImages: function(dic, nextScene) {
            var count = 0;
            var key;
            var onload = function() {
                count--;
                if (count > 0) return;
                if (typeof nextScene !== 'function') return;
                runtime.scene = nextScene;
            };
            for (key in dic) count++;
            for (key in dic) {
                var img = window.document.createElement("img");
                images[key] = img;
                img.onload = onload;
                img.src = dic[key];
            }
        }
    };
    canvas.$runtime = runtime;
    $events(
        canvas,
        {
            touchstart: function(evt) {
                var btn = evt.button;
                runtime.mouseButtons[btn] = runtime.mouseButtons[btn] <= 0 ? 2 : 1;
            },
            touchend: function(evt) {
                var btn = evt.button;
                runtime.mouseButtons[btn] = runtime.mouseButtons[btn] >= 0 ? -2 : -1;
            },
            move: function(evt) {
                runtime.pointerX = evt.x;
                runtime.pointerY = evt.y;
            }
        }
    );

    var loop = function(timestamp) {
        try {
            var f = runtime.scene;
            if (typeof f === 'function') {
                runtime.deltaTimestamp = timestamp - runtime.timestamp;
                runtime.timestamp = timestamp;
                runtime.mobils.forEach(
                    function(m) {
                        m.$move(runtime);
                    }
                );
                f.call(app, runtime);
                runtime.mobils.forEach(
                    function(m) {
                        m.$draw(runtime);
                    }
                );
            }
        } catch (x) {
            throw x;
        }
        window.requestAnimationFrame(loop);
    };
    window.requestAnimationFrame(loop);
};


exports.init = function() {
    window.addEventListener(
        'DOMContentLoaded',
        function() {
            if (typeof window.main !== 'function') {
                alert("Missing draw function 'window.main()'!");
            } else {
                var runtime = new exports.Runtime();
                runtime.start(window.main);
            }
        }
    );
};