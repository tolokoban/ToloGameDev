var TGD = require("tgd");

var images = {};


/**
 * @class
 */
var Runtime = function(canvas) {
    if (typeof canvas === 'undefined') canvas = 'canvas';
    canvas = TGD.$(canvas);
    canvas.$runtime = this;

    this.draw = null;
    this.timestamp = 0;
    this.deltaTimestamp = 0;
    this.context = canvas.getContext("2d");
    this.mouseButtons = [0,0,0];
    this.pointerX = -1;
    this.pointerY = -1;
    this.mobils = [];
    this.enabled = 0;
    var that = this;
    TGD.$events(
        canvas,
        {
            touchstart: function(evt) {
                that.mouseButtons[evt.button] = 1;
            },
            touchend: function(evt) {
                that.mouseButtons[evt.button] = -1;
            },
            move: function(evt) {
                that.pointerX = evt.x;
                that.pointerY = evt.y;
            }
        }
    );
};

/**
 * @member
 */
Runtime.prototype.start = function(draw) {
    if (this.enabled) return;    
    this.enabled = 1;

    if (typeof draw === 'function') {
        this.draw = draw;
    }

    var that = this;
    var loop = function(timestamp) {
        try {
            var f = that.draw;
            if (typeof f === 'function') {
                that.deltaTimestamp = timestamp - that.timestamp;
                that.timestamp = timestamp;
                that.mobils.forEach(
                    function(m) {
                        m.$move(that);
                    }
                );
                f.call(that);                
                that.mobils.forEach(
                    function(m) {
                        m.$draw(that);
                    }
                );
                var lst = [];
                that.mobils.forEach(
                    function(m) {
                        if (!m.isDead) {
                            lst.push(m);
                        }
                    }
                );
                that.mobils = lst;
            }
            var i;
            for (i = 0 ; i < 3 ; i++) {
                var v = that.mouseButtons[i];
                if (v == 1) {
                    that.mouseButtons[i] = 2;
                }
                else if (v == -1) {
                    that.mouseButtons[i] = -2;
                }
            }
        } catch (x) {
            this.enabled = 0;
            throw x;
        }
        window.requestAnimationFrame(loop);
    };
    window.requestAnimationFrame(loop);    
};

/**
 * Add a mobil to the list.
 * @member
 */
Runtime.prototype.addMobil = function(mobil) {
    mobil.runtime = this;
    this.mobils.push(mobil);
    return mobil;
};

Runtime.prototype.rgba = function(r,g,b,a) {
    return "rgba(" + TGD.toInt(r, 0, 255) 
        + "," + TGD.toInt(g, 0, 255) 
        + "," + TGD.toInt(b, 0, 255)
        + "," + TGD.toFloat(a, 0, 1) + ")";
};

Runtime.prototype.rgb = function(r,g,b) {
    return "rgb(" + TGD.toInt(r, 0, 255) 
        + "," + TGD.toInt(g, 0, 255) 
        + "," + TGD.toInt(b, 0, 255) + ")";
};

Runtime.prototype.image = function(id) {
    return images[id];
};

Runtime.prototype.loadImages = function(dic, nextDraw) {
    var count = 0;
    var key;
    var that = this;
    var onload = function() {
        count--;
        if (count > 0) return;
        if (typeof nextDraw !== 'function') return;
        that.draw = nextDraw;
    };
    for (key in dic) count++;
    for (key in dic) {
        var img = window.document.createElement("img");
        images[key] = img;
        img.onload = onload;
        img.src = dic[key];
    }
};



module.exports = Runtime;
