var TGD = require("tgd");
var Mobil = require("tgd.mobil");
var Listeners = require("tgd.listeners");

var images = {};


/**
 * @class
 */
var Runtime = function(opts) {
    if (typeof opts === 'undefined') opts = {};

    // Par défaut, on utilise la fonction globale "main" comme fonction de draw.
    if (typeof opts.draw === 'undefined') opts.draw = window.main;

    TGD.Mobil.call(this, opts);
    var canvas = opts.canvas;
    if (typeof canvas === 'undefined') canvas = 'canvas';
    canvas = TGD.$(canvas);
    canvas.$runtime = this;
    this.runtime = this;
    this._events = {};
    this._mobils = [];
    this.timestamp = 0;
    this.deltaTimestamp = 0;
    this.context = canvas.getContext("2d");
    this.mouseButtons = [0,0,0];
    this.pointerX = -1;
    this.pointerY = -1;
    var that = this;
    TGD.$events(
        canvas,
        {
            touchstart: function(evt) {
                that.mouseButtons[evt.button] = 1;
                var events = ["touchstart", "touchstart2", "touchstart3"]  ;
                var listeners = that._events[events[evt.button]];
                if (typeof listeners === 'undefined') {
                    return;
                }
                listeners.fire(that, evt);
            },
            touchend: function(evt) {
                that.mouseButtons[evt.button] = -1;
                var events = ["touchend", "touchend2", "touchend3"]  ;
                var listeners = that._events[events[evt.button]];
                if (typeof listeners === 'undefined') {
                    return;
                }
                listeners.fire(that, evt);
            },
            tap: function(evt) {
                var events = ["tap", "tap2", "tap3"]  ;
                var listeners = that._events[events[evt.button]];
                if (typeof listeners === 'undefined') {
                    return;
                }
                listeners.fire(that, evt);
            },
            move: function(evt) {
                that.pointerX = evt.x;
                that.pointerY = evt.y;
            }
        }
    );
    canvas.addEventListener(
        "mouseleave",
        function() {
            for (var i = 0 ; i < 3 ; i++) {
                that.mouseButtons[i] = 0;
            }
        },
        false
    );
};

Runtime.prototype = Object.create(Mobil.prototype);
Runtime.prototype.constructor = Runtime;


/**
 * Ajouter un __listener__ d'événement.
 * @param event{string} Nom de l'événement que l'on veut écouter :
 * * __tap__: click du bouton gauche ou du doigt.
 * * __tap2__: click du bouton du milieu de la souris.
 * * __tap3__: click du bouton droit de la souris.
 * * __toushstart__: bouton gauche enfoncé ou doigt touchant l'écran.
 * * __toushstart2__: bouton du milieu enfoncé.
 * * __toushstart3__: bouton droit enfoncé.
 * * __toushend__: bouton gauche relaché ou doigt ne touchant plus l'écran.
 * * __toushend2__: bouton du milieu relaché.
 * * __toushend3__: bouton droit relaché.
 */
Runtime.prototype.addListener = function(event, listener) {
    if (typeof this._events[event] === 'undefined') this._events[event] = new Listeners();
    return this._events[event].add(listener);
};

/**
 * Retirer un __listener__ à un événement.
 */
Runtime.prototype.removeListener = function(event, listener) {
    if (typeof this._events[event] === 'undefined') return false;
    return this._events[event].remove(listener);
};

/**
 * Retirer tous les __listeners__ d'un événement.
 */
Runtime.prototype.resetListeners = function(event) {
    this._events[event] = new Listeners();
};

/**
 * Démarer l'animation en utilisant la fonction __draw__.
 * @param draw{function} Fonction à appeler lors du dessin de chaque image.
 * Le `this` sera le __Runtime__ courant.
 */
Runtime.prototype.start = function(draw) {
    if (this.enabled) return;
    this.enabled = 1;

    if (typeof draw === 'function') {
        this.draw = draw;
    }

    var that = this;
    var loop = function(timestamp) {
        try {
            var f = that.draw;
            if (typeof f === 'function') {
                that.deltaTimestamp = timestamp - that.timestamp;
                that.timestamp = timestamp;
                that._mobils.forEach(
                    function(m) {
                        m.doMove(that);
                    }
                );
                that.context.save();
                f.call(that);
                that.context.restore();
                that._mobils.forEach(
                    function(m) {
                        that.context.save();
                        m.doDraw(that);
                        that.context.restore();
                    }
                );
                var lst = [];
                that._mobils.forEach(
                    function(m) {
                        if (!m._isDead) {
                            lst.push(m);
                        }
                    }
                );
                that._mobils = lst;
            }
            var i;
            for (i = 0 ; i < 3 ; i++) {
                var v = that.mouseButtons[i];
                if (v == 1) {
                    that.mouseButtons[i] = 2;
                }
                else if (v == -1) {
                    that.mouseButtons[i] = -2;
                }
            }
        } catch (x) {
            this.enabled = 0;
            throw x;
        }
        window.requestAnimationFrame(loop);
    };
    window.requestAnimationFrame(loop);
};

/**
 * Ajouter un __Mobil__ à la liste.
 */
Runtime.prototype.addMobil = function(mobil) {
    mobil.runtime = this;
    this._mobils.push(mobil);
    return mobil;
};

/**
 * Retourner le code pour définir la couleur à partir du niveau de rouge, de vert et de bleu.
 * @param r{number} Niveau de rouge entre 0 et 255.
 * @param g{number} Niveau de vert entre 0 et 255.
 * @param b{number} Niveau de bleu entre 0 et 255.
 * @param a{number} Niveau d'opacité définit par un nombre réel entre 0 et 1 : 0 = invisible et 1 = opaque.
 */
Runtime.prototype.rgb = function(r,g,b,a) {
    r = TGD.toInt(r, 0, 255);
    g = TGD.toInt(g, 0, 255);
    b = TGD.toInt(b, 0, 255);
    if (typeof a === 'number') {
        return "rgba(" + r + "," + g + "," + b + "," + TGD.toFloat(a, 0, 1) + ")";
    }
    return "rgb(" + TGD.toInt(r, 0, 255)
        + "," + TGD.toInt(g, 0, 255)
        + "," + TGD.toInt(b, 0, 255) + ")";
};

/**
 * Retourner un nouveau CANVAS invisible, mais utilisable en tant qu'image.
 */
Runtime.prototype.createCanvas = function(width, height) {
    if (typeof width === 'undefined') width = this.context.canvas.width;
    if (typeof height === 'undefined') height = this.context.canvas.height;
    var canvas = window.document.createElement("canvas");
    canvas.setAttribute("width", width);
    canvas.setAttribute("height", height);
    return canvas;
};

/**
 * @param id{string} Identifiant de l'image recherchée.
 * @return L'image dont on passe l'identifiant.
 */
Runtime.prototype.getImage = function(id) {
    return images[id];
};

/**
 * Chargement asynchrone d'images.
 */
Runtime.prototype.loadImages = function(dic, onLoad, onProgress) {
    if (typeof dic === 'string') {
        var id = dic;
        dic = {};
        dic[id] = id;
    }
    var that = this;
    var count = 0;
    var max = 0;
    var key;
    var that = this;
    var slotLoad = function() {
        count++;
        if (typeof onProgress === 'function') {
            onProgress.call(that, count / max);
        }
        if (count < max) return;
        if (typeof onLoad === 'function') {
            onLoad.call(that);
        }
    };
    var slotError = function(err) {
        console.log("ERROR!");
        console.log(err);
        slotLoad();
    };
    for (key in dic) max++;
    for (key in dic) {
        var img = window.document.createElement("img");
        images[key] = img;
        img.onload = slotLoad;
        img.onerror = slotError;
        img.src = dic[key];
    }
};

module.exports = Runtime;
